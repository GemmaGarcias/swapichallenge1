{"version":3,"sources":["assets/SwLogo.png","service/content.service.js","components/common/SimpleAccordion.js","components/common/SimpleCard.js","components/FilmsCharacters/FilmsCharacters.js","components/FilmsView/FilmsView.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","getFilmsRequest","a","axios","method","url","response","getDataRequest","newHttpsUrl","replace","useStyles","makeStyles","theme","root","margin","color","textAlign","heading","fontSize","typography","pxToRem","fontWeight","fontWeightRegular","pos","marginBottom","SimpleAccordion","props","classes","useState","displayCharacters","setDisplayCharacters","data","title","release_date","director","producer","opening_crawl","className","Accordion","AccordionSummary","expandIcon","aria-controls","id","Typography","AccordionDetails","Button","onClick","disabled","children","maxWidth","height","SimpleCard","name","birth_year","mass","films","homeworld","otherFilms","join","Card","CardContent","variant","component","FilmsCharacters","characters","setCharacters","isLoading","setIsLoading","film","useEffect","fetchData","Promise","all","map","filmUrl","getOtherFilms","reponseFilms","getNativePlanet","reponsePlanet","length","aFilms","Grid","container","spacing","character","i","key","xs","sm","md","item","FilmsView","setFilms","Container","results","App","src","SwLogo","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,oC,oOCE9BC,EAAe,uCAAG,4BAAAC,EAAA,4DACX,+BADW,kBAIAC,IAAM,CAAEC,OAAQ,MAAOC,IAHlC,iCADW,cAIjBC,EAJiB,yBAKhBA,GALgB,wHAAH,qDAWfC,EAAc,uCAAG,WAAOF,GAAP,eAAAH,EAAA,6DACtBM,EAAcH,EAAII,QAAQ,OAAQ,SADZ,kBAGTN,IAAM,CAAEC,OAAQ,MAAOC,IAAKG,IAHnB,gKAAH,sD,uECHrBE,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,OAAQ,MACRC,MAAO,UACPC,UAAW,QAEbC,QAAS,CACPC,SAAUN,EAAMO,WAAWC,QAAQ,IACnCC,WAAYT,EAAMO,WAAWG,mBAE/BC,IAAK,CACHC,aAAc,QAIH,SAASC,EAAgBC,GACtC,IAAMC,EAAUjB,IAD6B,EAEKkB,oBAAS,GAFd,mBAEtCC,EAFsC,KAEnBC,EAFmB,OAGsBJ,EAAMK,KAAjEC,EAHqC,EAGrCA,MAAOC,EAH8B,EAG9BA,aAAcC,EAHgB,EAGhBA,SAAUC,EAHM,EAGNA,SAAUC,EAHJ,EAGIA,cAEjD,OACE,yBAAKC,UAAWV,EAAQd,MACtB,kBAACyB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,WAAY,kBAAC,IAAD,MACZC,gBAAc,kBACdC,GAAG,kBAEH,kBAACC,EAAA,EAAD,CAAYN,UAAWV,EAAQV,SAAUe,IAE3C,kBAACY,EAAA,EAAD,KACE,4BACE,4BAAI,kBAACD,EAAA,EAAD,CAAYN,UAAWV,EAAQJ,KAAK,kDAAgCU,IACxE,4BAAI,kBAACU,EAAA,EAAD,CAAYN,UAAWV,EAAQJ,KAAK,8CAA4BW,IACpE,4BAAI,kBAACS,EAAA,EAAD,CAAYN,UAAWV,EAAQJ,KAAK,+CAA6BY,IACrE,4BAAI,kBAACQ,EAAA,EAAD,CAAYN,UAAWV,EAAQJ,KAAK,6CAA2Ba,MAGvE,kBAACQ,EAAA,EAAD,KACE,6BACE,kBAACC,EAAA,EAAD,CAAQC,QAAS,kBAAMhB,GAAqB,IAAOiB,SAAUlB,GAA7D,sBACCA,GAAqBH,EAAMsB,a,sCC3ClCtC,EAAYC,YAAW,CAC3BE,KAAM,CACJoC,SAAU,OACVC,OAAQ,QACRpC,OAAQ,MACRI,SAAU,IAEZc,MAAO,CACLd,SAAU,IAEZK,IAAK,CACHC,aAAc,MAIH,SAAS2B,EAAWzB,GACjC,IAAMC,EAAUjB,IADwB,EAEqBgB,EAAMK,KAA3DqB,EAFgC,EAEhCA,KAAMC,EAF0B,EAE1BA,WAAYH,EAFc,EAEdA,OAAQI,EAFM,EAENA,KAAMC,EAFA,EAEAA,MAAOC,EAFP,EAEOA,UACzCC,EAAaF,EAAMG,OAEzB,OACE,kBAACC,EAAA,EAAD,CAAMtB,UAAWV,EAAQd,MACvB,kBAAC+C,EAAA,EAAD,KACE,kBAACjB,EAAA,EAAD,CAAYkB,QAAQ,KAAKC,UAAU,KAAKzB,UAAWV,EAAQJ,KACxD6B,GAEH,kBAACT,EAAA,EAAD,CAAYN,UAAWV,EAAQJ,IAAKR,MAAM,iBACxC,+CAA6BsC,GAE/B,kBAACV,EAAA,EAAD,CAAYN,UAAWV,EAAQJ,IAAKR,MAAM,iBACxC,4CADF,UAC+BmC,EAD/B,QAGA,kBAACP,EAAA,EAAD,CAAYN,UAAWV,EAAQJ,IAAKR,MAAM,iBACxC,4CADF,UAC+BuC,EAD/B,QAGA,kBAACX,EAAA,EAAD,CAAYN,UAAWV,EAAQJ,IAAKR,MAAM,iBACxC,kDAAgC0C,GAElC,kBAACd,EAAA,EAAD,CAAYN,UAAWV,EAAQJ,IAAKR,MAAM,iBACxC,mDAAiCyC,K,aCU5BO,MAnDf,SAAyBrC,GAAQ,IAAD,EACQE,mBAAS,IADjB,mBACrBoC,EADqB,KACTC,EADS,OAEMrC,oBAAS,GAFf,mBAErBsC,EAFqB,KAEVC,EAFU,KAGpBC,EAAS1C,EAAT0C,KAERC,qBAAU,WACN,IAAMC,EAAS,uCAAG,sBAAApE,EAAA,sEACRqE,QAAQC,IAAIJ,EAAKJ,WAAWS,IAAhB,uCAAoB,WAAOC,GAAP,mBAAAxE,EAAA,sEACbK,EAAemE,GADF,cAC9BpE,EAD8B,gBAEPqE,EAAcrE,EAASyB,MAFhB,cAE5B6C,EAF4B,gBAGNC,EAAgBvE,EAASyB,MAHnB,cAG5B+C,EAH4B,4CAIbxE,EAASyB,MAJI,IAIEwB,MAAOqB,EAAcpB,UAAWsB,EAAc/C,KAAKqB,OAJrD,QAIlC9C,EAJkC,OAMlC2D,GAAc,SAAAD,GAAU,4BAAQA,GAAR,CAAoB1D,OANV,4CAApB,wDADJ,OASlB6D,GAAa,GATK,2CAAH,qDAYZD,GAAmC,IAAtBF,EAAWe,QAAcT,MAC1C,CAACJ,EAAWF,EAAYI,EAAKJ,aAEhC,IAAMW,EAAa,uCAAG,WAAO5C,GAAP,eAAA7B,EAAA,6DACd8E,EAAS,GADK,SAEZT,QAAQC,IAAIzC,EAAKwB,MAAMkB,IAAX,uCAAe,WAAOlB,GAAP,eAAArD,EAAA,sEACJK,EAAegD,GADX,OACvBE,EADuB,OAE7BuB,EAAM,sBAAOA,GAAP,CAAevB,EAAW1B,KAAKC,QAFR,2CAAf,wDAFA,gCAMXgD,GANW,2CAAH,sDASbH,EAAe,uCAAG,WAAO9C,GAAP,SAAA7B,EAAA,sEACPK,EAAewB,EAAKyB,WADb,mFAAH,sDAIrB,OACA,kBAACyB,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACpBnB,GAAcA,EAAWS,KAAI,SAACW,EAAWC,GAAZ,OAC1B,kBAACJ,EAAA,EAAD,CAAMK,IAAKD,EAAGE,GAAI,GAAIC,GAAI,GAAIC,GAAI,EAAGC,MAAI,GACrC,kBAACvC,EAAD,CAAYpB,KAAMqD,U,SCJnBO,MAjCf,WAAsB,IAAD,EAEO/D,mBAAS,MAFhB,mBAEZ2B,EAFY,KAELqC,EAFK,OAGehE,oBAAS,GAHxB,mBAGZsC,EAHY,KAGDC,EAHC,KAgBjB,OAXFE,qBAAU,WAQLH,GAPY,uCAAG,4BAAAhE,EAAA,sEACOD,IADP,OACVK,EADU,OAGhBsF,EAAStF,EAASyB,MAClBoC,GAAa,GAJG,2CAAH,oDAODG,KACb,CAACJ,IAGF,yBAAK7B,UAAU,mBACV6B,EAAY,uBAAG7B,UAAU,iBAAb,oCACX,kBAACM,EAAA,EAAD,CAAYkB,QAAQ,KAAKC,UAAU,KAAKzB,UAAW,eAAnD,SAGF,kBAACwD,EAAA,EAAD,CAAW5C,SAAS,MACfM,EAAQA,EAAMuC,QAAQrB,KAAI,SAACL,EAAMiB,GAAP,OACvB,kBAAC5D,EAAD,CAAiB6D,IAAKD,EAAGtD,KAAMqC,GAC7B,kBAAC,EAAD,CAAiBA,KAAMA,QAExB,iC,MCjBF2B,MAZf,WAEI,OACA,yBAAK1D,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKA,UAAU,WAAW2D,IAAKC,IAAQC,IAAK,kBAE9C,kBAAC,EAAD,QCAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.763db3cc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/SwLogo.9bb4deef.png\";","import axios from 'axios';\r\n\r\nexport const getFilmsRequest = async () => {\r\n    const apiFilm = 'https://swapi.dev/api/films/';\r\n\r\n    try {\r\n        const response = await axios({ method: 'get', url: apiFilm });\r\n        return response;\r\n    } catch (error) {\r\n        return error;\r\n    }\r\n};\r\n\r\nexport const getDataRequest = async (url) => {\r\n    let newHttpsUrl = url.replace('http', 'https');\r\n    try {\r\n        return await axios({ method: 'get', url: newHttpsUrl });\r\n    } catch (error) {\r\n        return error;\r\n    }\r\n}","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    margin: '2vw',\r\n    color: '#282c34',\r\n    textAlign: 'left'\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(18),\r\n    fontWeight: theme.typography.fontWeightRegular,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  },\r\n}));\r\n\r\nexport default function SimpleAccordion(props) {\r\n  const classes = useStyles();\r\n  const [displayCharacters, setDisplayCharacters] = useState(false);\r\n  const { title, release_date, director, producer, opening_crawl } = props.data;\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Accordion>\r\n        <AccordionSummary\r\n          expandIcon={<ExpandMoreIcon />}\r\n          aria-controls=\"panel1a-content\"\r\n          id=\"panel1a-header\"\r\n        >\r\n          <Typography className={classes.heading}>{title}</Typography>\r\n        </AccordionSummary>\r\n        <AccordionDetails>\r\n          <ul>\r\n            <li><Typography className={classes.pos}><strong>Release date: </strong>{release_date}</Typography></li>\r\n            <li><Typography className={classes.pos}><strong>Director: </strong>{director}</Typography></li>\r\n            <li><Typography className={classes.pos}><strong>Producers: </strong>{producer}</Typography></li>\r\n            <li><Typography className={classes.pos}><strong>Opening: </strong>{opening_crawl}</Typography></li>\r\n          </ul>\r\n        </AccordionDetails>\r\n        <AccordionDetails>\r\n          <div>\r\n            <Button onClick={() => setDisplayCharacters(true)} disabled={displayCharacters}> See Characters...</Button>\r\n            {displayCharacters && props.children}\r\n          </div>\r\n        </AccordionDetails>\r\n      </Accordion>\r\n    </div>\r\n  );\r\n}\r\n\r\nSimpleAccordion.propTypes = {\r\n    data: PropTypes.shape({\r\n      title: PropTypes.string,\r\n      release_date: PropTypes.string,\r\n      director: PropTypes.string,\r\n      producer: PropTypes.string,\r\n      opening_crawl: PropTypes.string\r\n    }),\r\n    children: PropTypes.element\r\n}","\r\nimport React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    maxWidth: '100%',\r\n    height: '300px',\r\n    margin: '1vw',\r\n    fontSize: 12,\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  },\r\n});\r\n\r\nexport default function SimpleCard(props) {\r\n  const classes = useStyles();\r\n  const { name, birth_year, height, mass, films, homeworld } = props.data;\r\n  const otherFilms = films.join();\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardContent>\r\n        <Typography variant=\"h5\" component=\"h2\" className={classes.pos} >\r\n          {name}\r\n        </Typography>\r\n        <Typography className={classes.pos} color=\"textSecondary\">\r\n          <strong>Birthdate: </strong>{birth_year}\r\n        </Typography>\r\n        <Typography className={classes.pos} color=\"textSecondary\">\r\n          <strong>Height: </strong>{`${height} cm`}\r\n        </Typography>\r\n        <Typography className={classes.pos} color=\"textSecondary\">\r\n          <strong>Weight: </strong>{`${mass} kg`}\r\n        </Typography>\r\n        <Typography className={classes.pos} color=\"textSecondary\">\r\n          <strong>Other movies: </strong>{otherFilms}\r\n        </Typography>\r\n        <Typography className={classes.pos} color=\"textSecondary\">\r\n          <strong>Native planet: </strong>{homeworld}\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nSimpleCard.propTypes = {\r\n    data: PropTypes.shape({\r\n      name: PropTypes.string,\r\n      birth_year: PropTypes.string,\r\n      height: PropTypes.string,\r\n      mass: PropTypes.string,\r\n      films: PropTypes.array,\r\n      homeworld: PropTypes.string\r\n    })\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { getDataRequest } from '../../service/content.service';\r\nimport SimpleCard from '../common/SimpleCard';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction FilmsCharacters(props) {\r\n    const [characters, setCharacters] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const { film } = props;\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            await Promise.all(film.characters.map(async (filmUrl) => {\r\n                let response = await getDataRequest(filmUrl);\r\n                const reponseFilms = await getOtherFilms(response.data);\r\n                const reponsePlanet = await getNativePlanet(response.data);\r\n                response = await {...response.data, films: reponseFilms, homeworld: reponsePlanet.data.name};\r\n                \r\n                setCharacters(characters => [...characters, response]);\r\n            }));\r\n        setIsLoading(false);\r\n        }\r\n\r\n        if(isLoading && characters.length === 0) fetchData();\r\n    }, [isLoading, characters, film.characters])\r\n\r\n    const getOtherFilms = async (data) => {\r\n        let aFilms = [];\r\n        await Promise.all(data.films.map(async (films) => {\r\n            const otherFilms = await getDataRequest(films);\r\n            aFilms = [...aFilms, otherFilms.data.title]\r\n        }))\r\n        return aFilms;\r\n    }\r\n\r\n    const getNativePlanet = async (data) => {\r\n        return await getDataRequest(data.homeworld);\r\n    }\r\n  \r\n    return (\r\n    <Grid container spacing={2}>\r\n        {characters && characters.map((character, i) => (\r\n            <Grid key={i} xs={12} sm={12} md={4} item>\r\n                <SimpleCard data={character}/>\r\n            </Grid>\r\n        ))}\r\n    </Grid>\r\n  );\r\n}\r\n\r\nFilmsCharacters.propTypes = {\r\n    film: PropTypes.shape({\r\n      characters: PropTypes.array\r\n    })\r\n}\r\n\r\nexport default FilmsCharacters;","import React, { useEffect, useState } from 'react';\r\nimport { getFilmsRequest } from '../../service/content.service';\r\nimport SimpleAccordion from '../common/SimpleAccordion';\r\nimport FilmsCharacters from '../FilmsCharacters/FilmsCharacters';\r\nimport Container from '@material-ui/core/Container';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nfunction FilmsView() {\r\n\r\n  const [films, setFilms] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const response = await getFilmsRequest();\r\n\r\n      setFilms(response.data);\r\n      setIsLoading(false);\r\n    }\r\n\r\n    if(isLoading) fetchData();\r\n  }, [isLoading])\r\n  \r\n    return (\r\n    <div className=\"Films-container\"> \r\n        {isLoading ? <p className=\"Films-loading\">Wait Im Loading comments for you</p> \r\n        : <Typography variant=\"h5\" component=\"h2\" className={\"Films-title\"} >\r\n            FILMS\r\n          </Typography>}\r\n        <Container maxWidth=\"lg\">\r\n            {films ? films.results.map((film, i) => (\r\n                <SimpleAccordion key={i} data={film}>\r\n                  <FilmsCharacters film={film}/>\r\n                </SimpleAccordion> \r\n            )) : <div></div>}\r\n        </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FilmsView;\r\n","import React from 'react';\r\nimport SwLogo from './assets/SwLogo.png';\r\nimport FilmsView from './components/FilmsView/FilmsView';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  \r\n    return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\"> \r\n        <img className=\"App-logo\" src={SwLogo} alt={\"StarWarslogo\"} />\r\n      </header>\r\n      <FilmsView />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}